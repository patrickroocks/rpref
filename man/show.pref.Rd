% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/show-pref.r
\name{show.pref}
\alias{as.character.preference}
\alias{eval.pref}
\alias{pref.str}
\alias{show.pref}
\title{Partial evaluation and string output of preferences}
\usage{
show.pref(p, df = NULL)

pref.str(p, df = NULL)

eval.pref(p, df = NULL)

\method{as.character}{preference}(p)
}
\arguments{
\item{p}{The preference to be shown.}

\item{df}{(Optional) A dataframe on which the preference operates.}
}
\description{
Functions to substitute variables and functions in preferences which can be calculated before the preference is evaluated on a dataframe.
This is especially used for string output of preferences.
}
\details{
The function \code{pref.str} (or \code{as.character(p)} for a preference \code{p}) returns the preference string
while \code{show.pref} outputs it directly to the console, preceded by \code{'[Preference]'}.
If \code{df} is specified, then a partial evaluation of the preference is done before converting it to a string.

The function \code{eval.pref} (with given \code{df}) partially evaluates the internal preference expression and
returns again a preference object.

The functions \code{show.pref} and \code{pref.str} have the optinal paramter \code{df}.
If this paramter is not given these functions are identical to \code{show(p)} and \code{as.character{p}}.
These functions do not do any evaluation and just convert the preference terms and expressions to characters.
If a dataframe \code{df} is given, then all expressions in \code{p} are evaluated in the environment
\code{where} p was defined. Except the the column names in \code{df} (which are potential attributes in \code{p})
are excluded from the evaluation. The content of the dataframe \code{df} does not matter;
only \code{names(df)} is used to get the "free variables" in \code{p}.

This partial evaluation can be also done via \code{eval.pref}. The following equality hold:

\code{as.character(eval.pref(p, df)) == pref.str(p, df)}

Additionally \code{eval.pref(p, df)} produces the same output on the console as \code{show.pref(p, df)}.
}
\examples{
f <- function(x) 2*x
p <- true(cyl == f(1))

# prints 'cyl == f(x)'
p

# prints 'cyl == 2'
show.pref(p, mtcars)
eval.pref(p, mtcars)
}

